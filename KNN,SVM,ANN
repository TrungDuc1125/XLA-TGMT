import os
import cv2
import numpy as np
import joblib
import time
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report

# ----------- Tiền xử lý dữ liệu -----------
def fetch_images_and_labels(data_dir):
    img_list = []
    lbl_list = []
    categories = ["Chicken", "Duck"]

    for category in categories:
        category_path = os.path.join(data_dir, category)
        if not os.path.exists(category_path):
            print(f"Warning: Folder '{category}' not found in {data_dir}")
            continue

        for img_file in os.listdir(category_path):
            img_path = os.path.join(category_path, img_file)
            try:
                img = cv2.imread(img_path)
                if img is not None:
                    resized_img = cv2.resize(img, (256, 256))
                    img_list.append(resized_img)
                    lbl_list.append(category)
            except Exception as e:
                print(f"Error loading image {img_path}: {e}")

    return np.array(img_list), np.array(lbl_list)

# ----------- Huấn luyện mô hình -----------
def create_and_save_model(model, model_filename, X_data, y_data):
    model.fit(X_data, y_data)
    joblib.dump(model, model_filename)

def train_models(X_train, y_train):
    # KNN Model
    knn = KNeighborsClassifier(n_neighbors=5)
    create_and_save_model(knn, 'model_knn.pkl', X_train, y_train)

    # SVM Model
    svm = SVC(kernel='rbf')
    create_and_save_model(svm, 'model_svm.pkl', X_train, y_train)

    # ANN Model
    ann = MLPClassifier(hidden_layer_sizes=(150,), max_iter=200)
    create_and_save_model(ann, 'model_ann.pkl', X_train, y_train)

# ----------- Dự đoán ảnh đơn -----------
def load_and_predict(image_path, model_path):
    try:
        model = joblib.load(model_path)
        img = cv2.imread(image_path)
        processed_img = cv2.resize(img, (256, 256)).reshape(1, -1)
        prediction = model.predict(processed_img)
        return prediction[0]
    except Exception as e:
        print(f"Prediction error: {e}")
        return None

# ----------- Đánh giá mô hình -----------
def evaluate_models(model_paths, X_test, y_test):
    for model_name, model_path in model_paths.items():
        try:
            model = joblib.load(model_path)
            start = time.time()
            y_pred = model.predict(X_test)
            duration = time.time() - start

            print(f"Model: {model_name}")
            print(classification_report(y_test, y_pred))
            print(f"Prediction time: {duration:.4f} seconds")
            print("-" * 30)
        except Exception as e:
            print(f"Error evaluating model {model_name}: {e}")

# ----------- Main function -----------
if __name__ == "__main__":
    # Bước 1: Tiền xử lý dữ liệu
    dataset_path = "Dataset/"
    images, labels = fetch_images_and_labels(dataset_path)
    
    # Kiểm tra dữ liệu đã đọc được
    if len(images) == 0 or len(labels) == 0:
        print("No data found. Please check the dataset directory.")
        exit()

    # Chuyển đổi ảnh thành vector và tách tập dữ liệu
    features = images.reshape(len(images), -1)
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=1)

    # Bước 2: Huấn luyện các mô hình
    print("Training models...")
    train_models(X_train, y_train)
    print("Models trained and saved successfully!")

    # Bước 3: Dự đoán với ảnh đơn
    test_image_path = "Dataset/Chicken/Ga2.jpg"  # Đường dẫn ảnh cần dự đoán
    model_files = {
        "KNN": "model_knn.pkl",
        "SVM": "model_svm.pkl",
        "ANN": "model_ann.pkl"
    }

    print("\nPredictions for single image:")
    for model_name, model_file in model_files.items():
        result = load_and_predict(test_image_path, model_file)
        if result:
            print(f"{model_name} predicted: {result}")

    # Bước 4: Đánh giá các mô hình
    print("\nEvaluating models on test set:")
    evaluate_models(model_files, X_test, y_test)
